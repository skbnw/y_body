headline,mainEntityOfPage,image,datePublished,dateModified,author,media_en,media_jp,str_count,body,images,external_links
SQLインジェクションや認証の欠陥を自動的に発見　「Claude Code」にセキュリティレビュー機能（＠IT）,https://news.yahoo.co.jp/articles/9167b106b54ebc977826a9c2917faba957e609e2,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20250924-00000006-zdn_ait-000-1-view.jpg?exp=10800,2025-09-24T08:00:11+09:00,2025-09-24T08:00:11+09:00,＠IT,zdn_ait,＠IT,895,"脆弱性を発見しコードの安全性を高められる（提供：Anthropic）
Anthropicは2025年8月6日（米国時間）、コーディング支援ツール「Claude Code」に、自動セキュリティレビューの機能を追加したと発表した。開発の早い段階で問題を発見できるため、セキュリティ強化と開発効率向上に効果があるという。
問題の発見だけでなく、解説、修正まで任せられる
今回追加されたセキュリティレビュー機能は2種類ある。1つ目はコマンド「/security-review」を利用するもので、2つ目はGitHubの自動化プラットフォーム「GitHub Actions」を利用するものだ。

コマンド「/security-review」

　Claude Code のターミナルで「/security-review」というコマンドを実行すると、コード全体をチェックし、潜んでいる脆弱（ぜいじゃく）性を検出する。Anthropicによると、SQLインジェクションやクロスサイトスクリプティング（XSS）のリスク、認証の欠陥、不適切なデータ処理などの問題が検出可能だ。

　発見された問題についてはClaude Codeがその問題の詳細な説明を提示する。さらに、Claude Code自身に修正を任せることもできる。

GitHub Actions

　GitHub Actionsを使ったセキュリティレビュー機能は、プルリクエストの内容（コード変更）を自動でチェックする仕組みだ。プルリクエストが作成されるとGitHub Actionsが自動起動し、プルリクエストで提案されたコード変更を詳細に分析し、そこにセキュリティ上の脆弱性がないかをチェックする。見つかった脆弱性や問題点は、該当するコード行に対してインラインでコメントとして自動投稿され、修正案や推奨事項も合わせて表示する。

　Anthropicによれば、セキュリティレビューの実施に当たり、自社のセキュリティポリシーに合わせて、適用されるルールのカスタマイズが可能だ。誤検知や既知の問題をフィルタリングする機能も備えているという。
＠IT",[],[]
IT訴訟解説：ベンダーの説明責任が問われた裁判「業務にそぐわないパッケージソフトウェアを導入したから訴えます。選んだのは私ですが」（＠IT）,https://news.yahoo.co.jp/articles/74fd55c3bb992fb302cd8478bf0b5837790b54db,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20250924-00000004-zdn_ait-000-1-view.jpg?exp=10800,2025-09-24T07:00:11+09:00,2025-09-24T07:00:11+09:00,＠IT,zdn_ait,＠IT,3574,"（写真：＠IT）
パッケージソフトウェア、クラウドサービス、生成AI（人工知能）のLLM（大規模言語モデル）など、ユーザー企業がシステムの重要な構成要素を選定しなければならない場面が、近年とみに増えてきた。

　ベンダーの技術者が一からプログラミングしてシステムを開発した時代であれば、ユーザー企業はベンダーに全てを任せ、採用する技術を自らの責任で決めることは少なかった。

　しかし昨今は、さまざまな業務を支援するパッケージソフトウェアが複数存在し、クラウドサービスも多種多様である。生成AIにしても「ChatGPT」「Gemini」「Microsoft Copilot」「Claude」など、さまざまな選択肢がある。これらをどう選定して、どのように組み合わせればいいのか、最終的に決めるのはユーザー企業である。ベンダーはそれを提案するに過ぎない。

　ユーザー企業にもITに関する知見がより多く求められる現代は、ある意味ユーザー企業受難の時代なのかもしれない。

　ではベンダーは、単に提案し、ユーザー企業からの質問に答えるだけでいいのか。重要な決定を素人であるユーザー企業に任せてより良いシステムが本当にできるのか、という問題はある。

　無論、ベンダーもパッケージソフトウェアや各種サービスを提案するに当たり、その場その時、最善と思われるものを選定はするだろう。しかしその選択が、ユーザー企業の業務に本当に適合するのか、ベストであるのかまではベンダーには分からないであろう。それにもかかわらず、何を導入するかをユーザー企業が最終的に判断するというのはいかにも心もとない。

　今回は、サービス選定の責任範囲が争われた紛争を紹介する。
業務に適合しないソフトウェアを巡る紛争
まずは概要をご覧いただこう。

---
東京地方裁判所 令和3年12月2日 判決より

あるクリニック運営者がITベンダーに対して、診療の予約機能などを有するクリニック向けパッケージソフトウェアの導入を委託し、ベンダーはこれを実施したが、これをテスト的に導入したところ、予約が2カ月先までしか入れられないことが分かった。

クリニックの業務では2カ月より先の予約を入れる必要があったが、本件パッケージソフトウェアではこれには対応できず、クリニック運営者は、本件パッケージソフトウェアが（2カ月以上先の予約を必要とする）業務に適合するかどうかを調査し、適合しないのであれば説明する義務があったはずなのに、それを怠ったとベンダーの説明義務違反を訴えた。

これに対してベンダーは、クリニック運営者からあらかじめ説明のない実務運用の調査まで行う義務まではなく、説明義務違反には当たらないと反論した。

出典：公刊物未掲載 事件番号 平成31年（ワ）3449号
---

　ベンダーに対してクリニック運営者が依頼したのは「パッケージソフトウェアの導入作業」であり、「パッケージソフトウェアの選定自体」は、ベンダーの提案に基づいてクリニック運営者が行ったようだ。

　そして、「予約が2カ月先までしか入らないのでは、実務上支障がある」ことはベンダーには伝えられていなかったことが、判決の内容から推測できる。ベンダーからすれば、「それならそうと先に言ってくれれば、実務に適合するソフトウェアを提案したのに」と言いたいところだろう。

　だがクリニック運営者からすると、「パッケージソフトウェアの提案をしてもらうのにどのような情報を提示すべきかなんて、ベンダーに教えてもらわなければ分からない」というところだろう。形式的上パッケージソフトウェアの選定責任は自分たちにあっても、「専門家であるベンダーが勧めるものであれば、問題なく動作するはずだ」と考えるのは、ある意味自然なことでもある。

　本訴訟は「ベンダーが負うべき責任はどの範囲までか」を争うものであり、裁判の結果は、一般のシステム開発全般、またクラウドサービスやLLM選定などもその射程に入るかもしれない。

　判決の続きを見てみよう。

---
東京地方裁判所 令和3年12月2日 判決より（つづき）

本件システム導入のための協働関係に入っていたと認められるベンダーは、少なくとも本件システムの予約管理機能について懸案事項が発生し得ることについての認識を持ち得たといえる。

本件の事情の下では、信義則上、クリニック運営者から本件クリニックにおける予約の実態や要望などについて追加で聴き取りをするなどにより、クリニック運営者が本件システムを導入するかについての適切な判断をすることができるように配慮すべき義務を負っていたというべきである。
---

　裁判所はクリニック運営者の訴えを認め、ベンダー敗訴となった。
ソフトウェアは動いてナンボ……にあらず
遠い記憶になるが、私が新卒で入社した会社の研修1日目で教わったのは、「ソフトウェア業はサービス業であって製造業ではない」ということだった。

　その言葉が意外だった私が教育担当者に「ソフトウェアは単なるモノづくりではなく、業務を良くすることを手伝うサービスだからか？」と尋ねたところ、教育担当者は、「そうではなく、ソフトウェアを作るということは、コンピュータを動かすための命令をユーザー企業に代わってするという作業であり、モノを作っているわけではないからだ」と説明してくれた。

　教育担当者の返答は恐らくソフトウェアの定義として正しいものである。ただ、今回の判決を見ると、私の質問もそう的外れなものではなかったように思われる。

　判決文にある通り、システムの導入はユーザー企業とベンダーの「協働関係」に基づいて行われるものである。それは、「ソフトウェアをつつがなく動かすため」ではなく、「ユーザー企業の業務を良くするため」の協働である。

　「ソフトウェアは動いてナンボ」ではなく、「業務を良くしてナンボ」である。「実務運用の説明を受けていないから、パッケージソフトウェアが業務にフィットしていなくとも責任を負えない」とするベンダーの主張は、ベンダーとしての「本来の責任」を果たしていないといえる。
餅は餅屋　システムはシステム屋
ユーザー企業こそ業務を知っているのだから、「ベンダーやパッケージの製造業者に確認や質問をして、パッケージソフトウェアの適合性を確認すべきではなかったか」との論もあろう。

　しかし、本連載で再三申し上げているように、ユーザー企業の多くは素人であり、仮にユーザー企業が決めるべき事柄であっても、ベンダーの専門的な知見に基づく説明や選択肢の提示が必要である。

　「予約管理パッケージソフトウェアの中には、どれぐらい先の日程まで管理できるのか制限を有するものがある。日程管理制約の有無や内容をユーザー企業が示さないと、ベンダーはパッケージソフトウェアの選定や提案ができない」と、ベンダーから自発的に知らせることが必要なのだ。

　システムの要件定義や方式設計全体についても同様のことがいえる。システム化の要件として「何を」「いつまでに」決めなければならないのか、「ハードウェアやソフトウェアの選定に当たって、どのような条件や情報が必要なのか」はユーザー企業には分からないことであり、そこをガイドするのが専門家であるベンダーの領域であり責任である。判決文にある「ユーザー企業が適切な判断をできるように配慮すべき義務」はまさにそうしたことを言っている。

　「システムが正常に動いて、業務に適合する」までがユーザー企業とベンダーの協働であり、専門家責任の範疇（はんちゅう）であることを再認識したい。
細川義洋
ITプロセスコンサルタント。元・政府CIO補佐官、東京地方裁判所民事調停委員・IT専門委員、東京高等裁判所IT専門委員NECソフト（現NECソリューションイノベータ）にて金融機関の勘定系システム開発など多くのITプロジェクトに携わる。その後、日本アイ・ビー・エムにて、システム開発・運用の品質向上を中心に、多くのITベンダーと発注者企業に対するプロセス改善とプロジェクトマネジメントのコンサルティング業務を担当。独立後は、プロセス改善やIT紛争の防止に向けたコンサルティングを行う一方、ITトラブルが法的紛争となった事件の和解調停や裁判の補助を担当する。これまでかかわったプロジェクトは70以上。調停委員時代、トラブルを裁判に発展させず解決に導いた確率は9割を超える。システム開発に潜む地雷を知り尽くした「トラブル解決請負人」。2016年より政府CIO補佐官に抜てきされ、政府系機関システムのアドバイザー業務に携わった
＠IT",[],[]
