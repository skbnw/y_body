headline,mainEntityOfPage,image,datePublished,dateModified,author,media_en,media_jp,str_count,body,images,external_links
GitHub CopilotをGitHub内のどこからでも呼び出せる「エージェントパネル」登場（＠IT）,https://news.yahoo.co.jp/articles/e03586d6b3ae7a326ac4e9d7ac609203ce972b72,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20251008-00000004-zdn_ait-000-1-view.jpg?exp=10800,2025-10-08T08:00:12+09:00,2025-10-08T08:00:12+09:00,＠IT,zdn_ait,＠IT,1552,"エージェントパネルのUI（ユーザーインタフェース）。自然言語でタスクを指示し、進行状況を一覧で確認できる（提供：GitHub）
GitHubは2025年8月20日（米国時間）、AI（人工知能）コーディングアシスタント「GitHub Copilot」に新機能「エージェントパネル」を導入したことを発表した。これによって「GitHub」内の任意のページから自然言語でGitHub Copilotにタスクを処理させることができる。
GitHub Copilotが自律的に生成したプルリクエストの例（提供：GitHub）
GitHubのどこからでも使えるエージェントパネル
エージェントパネルを使うことで、GitHub Copilotの「Coding Agent」機能を簡単に呼び出すことができる。

　Coding Agentとは、ワークフロー自動化ツール「GitHub Actions」の実行環境で非同期かつ自律的に動作し、複数タスクを並行処理できる機能だ。開発者のPCの電源が切れていても、作業を継続する。エージェントパネルは、こうした自律的な作業をGitHubのどのページからでもワンクリックで依頼、管理可能にする。

　エージェントパネルはナビゲーションバーに追加された「Agents」ボタンから起動できる。開発者は現在作業中のページを離れることなく、エージェントパネルを通じて新しいタスクの登録や進行中タスクの確認が可能だ。依頼したタスクはCoding Agentがバックグラウンドで処理し、完了時にはレビュー用のプルリクエストを自動生成する。

　GitHubは「開発者が作業の流れを中断せずにタスクをアサインできるようになる」と強調する。具体的な用例として、開発者はエージェントパネルで「LoginControllerにインテグレーションテストを追加して」「WidgetGeneratorをリファクタリングして」といった自然言語のプロンプトを入力して、関連するリポジトリやブランチを選択するだけでタスクが進行する。

　今回の更新でCoding Agentの高度な機能の利用単位である「プレミアムリクエスト」の消費方式も変更された。従来は1セッション（タスクの指示からプルリクエストの自動生成まで）ごとに複数のプレミアムリクエストが消費されていたが、1セッション当たりのプレミアムリクエスト消費数が「1」に統一された。

　エージェントパネルは、GitHub Copilotの全ての有料プラン（「Pro」「Pro+」「Business」「Enterprise」）で利用可能だ。BusinessまたはEnterpriseを導入している場合は、管理者による有効化が必要となる。
このニュースのポイント
Q: 「エージェントパネル」を使うと何ができるのですか？

A: エージェントパネルを使うことで、GitHubの任意のページから自然言語でGitHub Copilotにタスクを処理させることができる。開発者は現在作業中のページを離れることなく、新しいタスクの登録や進行中タスクの確認が可能。

Q: 「エージェントパネル」はどうすれば利用できますか？

A: GitHubのナビゲーションバーに追加された「Agents」ボタンから起動する。ここから自然言語でタスクを指示し、進行状況を一覧で確認できる。

Q: エージェントパネルはどのプランで利用できますか？

A:  GitHub Copilotの有料プラン（「Pro」「Pro+」「Business」「Enterprise」）で利用可能。ただし、BusinessまたはEnterpriseを導入している場合は管理者による有効化が必要。
＠IT",[],[]
IT訴訟解説：プログラムの著作権が争われた判例「どんなにアイデアが秀逸でも、プログラムが平凡なら著作物とはいえないですね」（＠IT）,https://news.yahoo.co.jp/articles/58f0ebf52309680628bb5aac943edfbd22d1f1ef,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20251008-00000001-zdn_ait-000-1-view.jpg?exp=10800,2025-10-08T07:00:12+09:00,2025-10-08T07:00:12+09:00,＠IT,zdn_ait,＠IT,4112,"（写真：＠IT）
IT訴訟事例を例にとり、システム開発にまつわるトラブルの予防策と対処法を解説する本連載。今回は著作権についての興味深い判決を取り上げる。本判決では、プログラムを著作物と認めるための重要な考え方が明確に述べられている。

　著作権の問題は決して人ごとではない。日々プログラムを開発する技術者には、自分が作成したプログラムが著作物として保護されるのか、既存のライブラリやフレームワークを流用する際に著作権侵害のリスクがないのか、あるいはベンダーに委託して開発してもらったプログラムの著作権が誰に帰属するのかといった問題が、常に身近に存在している。

　本判決で示された考え方を参考に、自分が関わるプログラムの著作権について改めて検討してみることは、将来的なトラブルを避ける上で極めて有用だと思う。
プログラムの著作権が争われた事件の概要
まずは、裁判の概要から見ていこう。

---
知的財産高等裁判所 令和7年3月25日判決より

原告企業は、競馬の勝敗予想を数値化した指数を算出し、インターネット上で競馬新聞を提供している企業である。原告企業は競馬の予測にIDM（インデックスメモリー）指数という特殊な数値を計算し、これを用いて予測を行うものであった。

ある時期、被告企業のある従業員（被告企業代表者。事件後原告企業を退職）は、原告企業に在籍しながら自らもインターネット上で競馬新聞を提供する会社（被告企業）を立ち上げた。この会社には原告企業からもう一人の従業員（被告企業従業員。事件後、原告企業を退職）も参加していた。

被告企業代表者と同従業員は、ある日、原告企業のオフィスからPCなどを持ち出し、その後、原告企業を退職し、その後原告企業のIDM指数を流用した予測プログラムを利用して競馬新聞の発行を継続した。

これに対して原告企業は、被告企業代表や元従業員らが原告企業の開発したIDM指数作成プログラムを不正に使用したとして、著作権侵害を主張し、プログラムの使用差し止めや損害賠償などを求めて提訴した。

出典：裁判所Webサイト 事件番号 令和5年（ネ）第10057号
---
機能の価値は高いがプログラムとしては平凡
IDM指数とは、原告企業が独自に開発、使用している「競走馬の能力を数値で表した、独自の成績評価」である。走破タイムだけでなく、レース内容や馬の状態といった「記憶の要素」も加えているところに独自性があり、機能的には明らかな独創性と価値を持つソフトウェアであったことがうかがえる。多くの競馬ファンに利用され、商業的にも大きな成功を収めていたようである。

　しかし、プログラムの実装面に目を向けると、異なる側面が見えてくる。

　IDM指数を使用した予測プログラムは、「Microsoft Excel」や「Microsoft Access」といった既存のソフトウェアのマクロ機能を利用し、基本的には加減乗除の計算処理を組み合わせて構築されていた。つまり、革新的なアイデアを実現するために用いられた手法は、一般的な表計算ソフトウェアやデータベースソフトウェアの標準的な機能の組み合わせだったのである。

　アイデアは独創的だがプログラムは平凡。果たしてこうしたものに著作物性はあるのだろうか。

　実現される機能やアイデアの独創性という側面では、本ソフトウェアはプログラムも含めて著作物ということになるだろう。しかしプログラムの表現方法における創作性だけを見るなら、著作物と認められるのは難しそうだ。

　原告の立場からすれば、長年かけて開発した独創的な競馬予想ソフトウェアを不正に利用されたのだから、当然著作権侵害が成立すると考えるだろう。一方、被告の立場からすれば、汎用（はんよう）的なソフトウェアの標準機能を組み合わせただけのプログラムに著作権があるとはいえないと反論するだろう。

　機能の独創性を重視して原告の主張を認めるのか、それとも実装方法の一般性を理由に被告の主張を認めるのか。

　読者の皆さまはどちらの立場に立つだろうか。

---
知的財産高等裁判所 令和7年3月25日判決より（つづき）

プログラムの著作物性が認められるためには、プログラムの具体的記述において、指令の表現自体、指令の表現の組み合わせ、表現順序から成るプログラム全体に選択の幅があり、ありふれた表現ではなく、作成者の個性が表れていることが必要である。

原告の主張するプログラムは（中略）表計算ソフトウェアまたはデータベースソフトウェアに備わる単純な加減乗除の計算機能を利用して（予測値を）を算出するものであり、（IDM指数）等などはプログラムの具体的記述の前提となるアイデアに過ぎず、プログラム全体に作成者の個性が表れているとはいえない。
---

　裁判所はこのように述べて、このプログラムは著作物には当たらないと判断した。
「アイデア」だけでは著作物とはならない
ソフトウェアを作る際、当然ながら「そこにどのような機能が必要であるか」を検討する。そして多くの場合、そこには幾つかのアイデアが含まれる。

　このソフトウェアでいえば、競馬の勝敗予測を数値化する方法自体は独特のアイデアだった。しかし、それを表現するプログラムはExcelやAccessの機能を組み合わせただけのものであり、そこに創意工夫はなかった。

　プログラムを著作物と認めるためには、プログラムコード自体に独自性が必要であり、それによって実現する機能が新規性に富むアイデアに基づくものであったとしても、プログラムに独自性がなければ著作物としては認められないということのようだ。

　このようにプログラムコードとアイデアを明確に区別した判断は、開発者、利用者を問わず、プログラムに関わる上では頭に入れておくべきことかもしれない。自分の作ったプログラムが著作物であると主張するときはもちろん、他人の作ったプログラムを流用して開発をするときやユーザー企業がベンダーに開発させたプログラムに関する自身の諸権利を明確にする上でも非常に重要だ。
作る側、使う側が注意すべきこと
では、開発者が自らのアイデアを保護するためには、どうすればいいのだろうか。

　結論からいうと、著作権を主張できないのであれば、アイデアを営業秘密として保護すべきであろう。そしてアイデアを営業秘密として保護するためには、それなりのセキュリティ対策を打っておく必要がある。

　本件では、原告がIDとパスワードによるアクセス制限、退職者が出た際の一斉パスワード変更、社外秘としての明確な位置付けといった管理体制を整えていたことが重要な要素となり、「プログラムは著作物ではないが、IDM指数自体は営業秘密である」ことが認められた。逆にいうと、単にプログラムを作っただけでは、それがいかに独創的なアイデアであっても営業秘密と認められない可能性があるということだ。

　営業秘密と認められるためには、従業員の兼業や競業について明確なルールを設ける必要があることも、本件を見ればよく分かる。開発者というよりも企業での対策が必要な事項ではあるが、従業員に兼業を認めるなら、どのようなルールで秘密の漏えいを防ぐのか、よく検討する必要がある。退職者についても同じだ。

　無論、特定の従業員だけが重要なシステムの全体を把握できる状況を避けることも重要だ。「システムの分散管理」や「複数人でのチェック体制」により、単独での持ち出しを防ぐ仕組みを構築する必要がある。

　一方、既存のライブラリやフレームワークを組み合わせて開発を行う立場、つまりプログラムを利用する側であれば、この判決は一見安心材料となるように思える。標準的な技術の組み合わせによる実装は、著作権侵害のリスクが相対的に低いということが示されたからだ。

　しかし、プログラムによって実現されるアイデア自体が営業秘密として保護される可能性はあるわけだから、無断でこれを流用するとやはり損害賠償の対象となってしまいかねない。他社と同じような機能を持つシステムを開発する場合、たとえ全く異なるプログラム言語や技術を使って独自に実装したとしても、その機能を実現するためのアルゴリズムや手法、データの処理方法が他社の営業秘密に該当する可能性はあるのだ。

　本件では、競馬予想を数値化するという基本的なアイデアから、具体的な計算要素の選択、数値化の方法、補正処理の手法に至るまで、IDM指数を構成する一連の仕組みが営業秘密として保護された。被告は全く異なるプログラム言語（C
#
）を使用していたにもかかわらず、そのアイデアや手法を流用したことが問題視されている。

　同種の機能を開発する際、単にプログラムコードを独自に書けば問題ないと考えるのは危険だ。その機能を実現するためのアプローチ自体が、他社が長年かけて蓄積した営業秘密である可能性を常に念頭に置く必要がある。
細川義洋
ITプロセスコンサルタント。元・政府CIO補佐官、東京地方裁判所民事調停委員・IT専門委員、東京高等裁判所IT専門委員NECソフト（現NECソリューションイノベータ）にて金融機関の勘定系システム開発など多くのITプロジェクトに携わる。その後、日本アイ・ビー・エムにて、システム開発・運用の品質向上を中心に、多くのITベンダーと発注者企業に対するプロセス改善とプロジェクトマネジメントのコンサルティング業務を担当。独立後は、プロセス改善やIT紛争の防止に向けたコンサルティングを行う一方、ITトラブルが法的紛争となった事件の和解調停や裁判の補助を担当する。これまでかかわったプロジェクトは70以上。調停委員時代、トラブルを裁判に発展させず解決に導いた確率は9割を超える。システム開発に潜む地雷を知り尽くした「トラブル解決請負人」。2016年より政府CIO補佐官に抜てきされ、政府系機関システムのアドバイザー業務に携わった
＠IT",[],[]
