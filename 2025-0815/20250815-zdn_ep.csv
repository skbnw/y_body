headline,mainEntityOfPage,image,datePublished,dateModified,author,media_en,media_jp,str_count,body,images,external_links
ユーザー企業がSIerに抱く不信感の“源”　「巨大ITシステムの呪縛」とは（ITmedia エンタープライズ）,https://news.yahoo.co.jp/articles/8ea75bbf44441d0d9aa2287eeed427c43b1712e1,https://newsatcl-pctr.c.yimg.jp/t/amd-img/default.jpg?exp=10800,2025-08-15T16:00:14+09:00,2025-08-15T16:00:14+09:00,ITmedia エンタープライズ,zdn_ep,ITmedia エンタープライズ,5180,"前回はユーザー企業がSIerに不信感を抱く根底に、ユーザー企業にとってITシステムの開発費用は高く、開発期間は長く感じられるという認識のギャップがあることに触れた。

　SIerからすると、深刻なトラブルを発生させないために取った措置だが、ユーザー企業には「ちょっとした機能を追加するだけなのに、なぜこれほど高い費用や長い期間が必要なのか」と感じられる。

　こうした認識のギャップが生まれる背景には、「ちょっとした機能の追加」でも開発にかかるコストや時間が膨れがちな老朽化したITシステムの問題が一つある。

　特に、「一枚岩」を指す「モノリス」を冠した「モノリスシステム」というこれまで主流だった開発手法ではその問題が顕著だ。そこで今回は、モノリスシステムが抱える課題と、それらの課題を解消するための新しい開発手法に触れる。
疎結合は重要　それが分かっていてもなぜか蜜結合システムになる「呪縛」
「システムは疎結合に作れ」――。筆者は若い頃、先輩方から口酸っぱく言われてきた。

　データベース（DB）はできるだけ物理分割を意識してシステム設計することが、システム設計の肝であり、SEとして腕の見せどころだと考えてきた。

　しかし、一般的にはデータベースを巨大化させ、データベースにアクセスすれば何でもできるようにする方が簡単であるため、広範囲なモノリスシステムにする場合が多い。

　データベースが巨大化すると、データの整合性を保つための処理が特定の部分に集中しやすくなる。データベースアクセス部分の機能は1カ所でなければデータベースの整合性が取れなくなるためだ。このため、この特定部分に修正や変更が集中し、開発のボトルネックになる。さらに、データベースが巨大になると、データが壊れるといった問題が発生した場合、トラブル範囲が広範囲に及ぶリスクの高い構造になる。

　みずほ銀行でかつて起こったトラブルは、振込処理が通常通り実行されないという不具合から始まり、広範囲にわたって深刻な影響が広がったと筆者は認識している。みずほ銀行のシステムはシステムが構築された時期や、金融システムの特性から考えて、データベースを中心とした巨大なモノリスシステムで構築されている可能性が極めて高いと筆者は見ている。

　みずほ銀行のシステムがモノリスシステムで構築されているとすれば、広範囲に影響が及ぶことは容易に推測できる。
なぜ巨大システムは「手がかかる」のか？
モノリスシステムで構築されているシステムを独立して対応可能な形にするためには、開発のボトルネックとなる部分を直接修正せずに、別の部分で対応することが多くなる。その結果、システムとしての複雑度がますます進んでいく。こうしてますます、「手のかかるITシステム」に“成長”するのだ。

　具体的に説明しよう。本来であれば主要データベースで管理すべき項目を、周辺データベースで管理するとする。すると、他のシステムのデータ項目を追加で参照する場合に、主要データベースと周辺データベース双方へのアクセスが必要になる。このように複数のシステムが周辺データベースを参照し始めることでシステムの複雑度が上がる。

　いずれにしても、筆者が開発してきたシステムは比較的、疎結合システムではあったが、モノリスシステムからの呪縛（じゅばく）から完全に逃れられたわけではない。データベースを共有するという意味で密結合システムであることに変わりないからだ。
オブジェクト指向型開発の歴史と課題
ここまで、「手のかかるシステム」「トラブルが起こるたびに複雑化するシステム」というモノリスシステムの問題点を見てきた。

　では、なぜ多くの企業がモノリスシステムをこれまで開発してきたのだろうか。

　第2回で述べたように、新たなITシステムの開発方法である「オブジェクト指向設計」の考え方は、1980年代にさかのぼる。

　筆者も当時、当時の主流であった「データ中心設計」に違和感を覚えていた。データ中心設計とは、プロセスよりも安定度が高いデータを中心に設計する考え方に基づいた設計思想だ。しかし、データとプロセスは本来不可分であり同時に設計を進めていくべきだと筆者は漠然と感じていた。そういう意味で、オブジェクト指向設計の、データとプロセスを同時に整理することに強いシンパシーを感じた。

　しかし、オブジェクト指向設計を実際の開発に適用しようとすると、問題が生じた。オブジェクト指向設計では「抽象化」という手法を用いてシステムの構造や要素を整理するが、当時使われていた抽象化の方法は、ある機能や特徴といった一つの性質に焦点を当てて設計を進めるというものだった。このアプローチはあいまいで設計者にとっても理解しづらいものだった

　これはどういうことか。「クルマは4輪車だ」と抽象化した場合、「海外のバスには6本のタイヤを持つものもあるが、バスはクルマではないのか」「ベビーカーはクルマなのか」などの疑問が出てきてしまう。

　そもそも、世の中に存在している事象はさまざまな異なる性質を持っており、一つの性質で抽象化することはどだい無理なのだ。こうしてオブジェクト指向設計は、理論と実践に大きな乖離（かいり）が生じた。

　1つのオブジェクトを設計する場合、オブジェクトが極めて小さい機能である場合は、比較的容易に設計、開発できる。顧客名だけ管理するオブジェクト機能では、「顧客名」そのものが抽象化された概念であり、それ以上は分割できない。

　ところが、顧客属性を管理する大きなオブジェクトを作るためには、「顧客名」「住所」「電子メールアドレス」「電話番号」「性別」「生年月日」など多くから構成される小さなオブジェクトの集合体を作る必要がある。

　つまり、オブジェクトが大きくなればなるほど、全てのオブジェクトを格納できる物理的なメモリーが必要になる。

　1980年代当時、プログラムを実行するためのメモリーの大きさには著しい制限があり、プログラムの非常駐化などを駆使して対応した。つまり、オブジェクト指向設計は、ハードウェアの制限により、理論を実践できない状況にあった。

　また当時、オンラインシステムのデータベースは、ディスク装置に格納されていた。逆に言えば、ディスク装置ができたからこそオンラインシステムが実装可能になったのだ。

　オンライン処理の場合、入力を終えて送信ボタンを押して応答画面が表示されるまでの時間は3秒以内と言われる。この3秒は、「人が遅いと不快に思わない時間」と言われている。この性能要件を実現するために、当時は相当に苦労したものだ。

　外部ネットワークも貧弱で、できるだけ小さなデータに加工して送信しても片道1秒弱、往復だと2秒弱かかる。サーバで処理できるのは、わずかに約1秒。実際のプログラム実行にかかる時間以外にもディスク装置へのアクセスに50ミリ秒を要し、読み書きでさらに100ミリ秒かかる。

　計算処理をするためには、「価格表」などのデータを保存しているデータベースを参照する必要がある。データベースを更新した場合は、システム保全のためにログなどの制御情報を出力する必要がある。これらの作業は全てディスク装置へのアクセスを必要とする。

　そのため、データベースを安易に分割すれば、性能条件を満たすことができない。ではどうすべきか、ここまで読んだ読者はお分かりだろう。

　ハードウェア性能の貧弱さをカバーするために、データベースに多くの項目を集中させ、一度のアクセスで多くのデータ項目を取得する設計とした。必要な処理を集中させて、一度にデータを更新するアーキテクチャを採用せざるを得なかった。

　これが欠点だらけのモノリスシステムが作られ続けた真の原因だと筆者は考えている。つまり、ハードウェアやネットワークの著しい制約の下、苦労し工夫を凝らしてソフトウェアを開発した結果、システムは複雑度を増していったのである。
ハードウェアとソフトウェアの進歩と未来
今はハードウェアもネットワークも想像を絶する進歩を遂げている。つまり、ソフトウェアはハードウェアの呪縛から解放されたのだ。つまり、モノリスシステムから解放され、オブジェクト指向型開発ができる「ソフトウェアファーストの時代」がついに来たのだ。

　筆者のソフトウェアエンジニアとしての経歴は、ハードウェアの制約を常に受けながら、ハードウェアの進歩に合わせて設計や開発の方式を更新してきた「歴史」でもある。

　2001年、確定拠出年金法が施行され、iDeCo（イデコ、個人型確定拠出年金）がスタートした。いわゆる「日本版401ｋ」だ。その中心のシステムは複数の大手金融機関が共同で開発したが、このシステム開発プロジェクトには事実上2つの陣営が形成された。筆者は、内外の大手金融機関20行が中心となって出資した会社のITシステム責任者としてプロジェクトを推進した。

　当時の大手金融機関にはメインフレームに対する強い信頼、つまり「メインフレーム信仰」が存在していた。こうした中、金融機関のシステムとしては初めてフルオープンシステムを採用して開発することになった。

　今では、当たり前の「Webサイトやコールセンターによる受付」や、「ロードバランサーによるWebサーバの負荷分散（n+1構成）」といった当時の新技術を全面的に採用した。オープンシステムへのさまざまな罵詈雑言を浴びつつ導入することになった。

　こうした結果、開発コストが抑制され、もう一つの陣営よりも早く黒字化を達成した。もちろんシステムは長期間にわたって問題なく稼働している。

　今や、メインフレームは完全に役割を終えたと筆者は見ている。2000年前後から大きく技術が変わった。技術変化が起こるとき、守旧派が本質を見極めることなく変化を嫌って新たな技術をつぶそうとするのは古今東西変わらない。そして、変化に適応できない守旧派は新時代を生き抜くことはできない。『平家物語』でも語られている「盛者必衰の理（ことわり）」だ。

　今まさに、ITシステム開発の世界では、従来の開発手法に馴染んだエンジニアが守旧派に陥るかどうかの分岐点となる変化が起きていると考えている。

　さらに、今回起きている変化はハードウェアの技術革新だけでなく、ソフトウェアの技術革新でもあり、オープンシステムの変化（メインフレームからサーバというハードウェアの変化）とは比べものにならない大きな変化だといえる。

　ハードウェアが機能を更新するためには、新たなハードウェアの導入が必要になるが、ソフトウェアの場合はソフトウェア自体を改良、更新することで機能が向上する。ソフトウェアは進歩し続ける「機能」であり、物理的な物流は必要なく、在庫が積み上がることもない。

　ハードウェアを新たに作るには鉄などの資材の調達や、製造機械、製造コストや配達のための物流が必要になる。さらに同一の製品を不良なく作ることは困難で、必ず一定の不良品が生まれる。経年劣化は避けられず、必ず部品交換が必要になる。

　一方、ソフトウェアは製造コストをはじめとするそれらの製造設備は必要なく、世界のどこでも瞬時にダウンロード可能で、不良品も生まれない。さらに、経年劣化も起こらず、バグがなければ永遠に利用できる。

　つまり、ソフトウェアが技術革新の中心となるこれからの世界では、とてつもない変革が起こることになるだろう。現に自動車ではあらゆる部品がソフトウェアによって制御されるようになっており、機械的な部品の中には不要になったものもある。既にハンドルとタイヤは物理的に繋がっておらず、クラッチペダルもなくなっている。ハンドルやトランスミッションはソフトウェアで制御している。ハードウェアの故障を検知、監視する仕組みもソフトウェアが担うようになり、ハードウェア技術よりもソフトウェア技術の方が自動車業界ではより重要になりつつある。

　ソフトウェアの優位性は際立っており、全てのハードウェア製品におけるソフトウェア化が進んでいる。その結果、ハードウェア製品の製造会社は生き残りをかけた変革を迫られている。この波は、自動車産業だけでなく、全ての産業に及ぶだろう。

　ここまで、モノリスシステムが抱える問題を中心に言及してきた。

　次回は、ソフトウェア開発においてマイクロサービスアーキテクチャを採用することで、モノリスシステムの課題が具体的にどう解消するのかを述べたい。
ITmedia エンタープライズ",[],[]
中小企業はどれくらいAIを使ってる？　導入予定なしが過半数の業界も（ITmedia エンタープライズ）,https://news.yahoo.co.jp/articles/20cf676c2569ae462e10f7da101724f88f16ee32,https://newsatcl-pctr.c.yimg.jp/t/amd-img/20250815-00000012-zdn_ep-000-1-view.jpg?exp=10800,2025-08-15T07:00:15+09:00,2025-08-15T07:00:15+09:00,ITmedia エンタープライズ,zdn_ep,ITmedia エンタープライズ,1046,"（写真：キーマンズネット）
ハッピーカーズは、「AI時代の人材配置と経営判断」に関する調査結果を発表した。IT・ソフトウェア業、建設業、サービス業に属する中小企業の経営者1007人を対象に、AIの導入状況や人材戦略の変化、今後の課題などを聞いた。
AIと人材不足、中小企業の現状と今後の課題
調査では全体の約7割が「人材不足を感じている」と回答。中でもIT・ソフトウェア業では「とても感じている」と答えた割合が37.7％と高く、他業種よりも人材確保の難しさが際立っている。AIの導入状況については、IT・ソフトウェア業で「導入している」「導入に向けて準備中」と答えた企業が約6割に達している。建設業とサービス業は「導入している・準備中」の割合は低く、特に建設業では「導入予定はない」が52.0％と半数を超えており、導入意欲に業種間で大きな差があることが示された。

　導入・検討中のAI活用領域では「一般事務・データ入力の自動化」（41.6％）が多く、「顧客対応」（30.5％）「勤怠管理・人事労務の効率化」（27.1％）が続いた。AI活用は「まずは簡易な業務から」という傾向が強く、日常的かつ定型的な業務から導入されていることがうかがえる。

　AI導入による人員削減については、「実施済み・予定あり」と答えた割合が48.9％だった。縮小が検討されている業務は「データ入力・管理」（47.0％）「事務・総務・庶務」（35.6％）「会計・経理」（31.8％）が上位を占めた。

　AIでは代替が困難な業務として「顧客との信頼関係構築」（44.8％）「クレーム対応」（33.6％）「現場での臨機応変な判断・対応」（31.3％）が挙げられている。これらの領域においては対人スキルや判断力が引き続き重視されている。AIが普及した場合に重要視されるスキルとしては「コミュニケーション力」（39.8％）「問題解決能力」（35.2％）「創造力・企画力」（33.9％）が上位に挙げられた。

　AIや働き方の変化で「自分の働き方を見直す必要がある」と回答した割合は約7割に上った。変化を前提とした働き方やスキル形成が今後のスタンダードになりつつあることが分かった。

　AI導入は単なる業務効率化だけでなく人材戦略や組織運営の再設計を迫る要因として中小企業経営にも影響を与えている。今後、AIによる省力化および人による付加価値創出の両立が求められる時代になる可能性がある。
ITmedia エンタープライズ",[],[]
